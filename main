from dotenv import load_dotenv
import streamlit as st
import os
import google.generativeai as genai
from PIL import Image
import pyttsx3

load_dotenv()  ## load all the environment variables

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

## initialize our streamlit app
st.set_page_config(page_title="Currency DETECTOR")
st.header("Currency DETECTOR")
input_text = st.text_input("Input Prompt: ", key="input")
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
image = ""
if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image.", use_column_width=True)

submit = st.button("Predict ")

input_prompt = """
"Imagine you are a translator for individuals who are blind. They will provide you with images, and your task is to predict and communicate the extracted value in Indian currency. If the image displays a different country's currency, instruct the model to translate that value into Indian currency."

This prompt aims to convey the role of the language model as a translator for blind individuals, specifying that the model should predict values from images and translate them into the Indian currency when necessary.
compare with real one and say real and fake 
if the image   is other country rupess convert into india curreny and tell total amount in india currency
output: the currency is X Value
"""

## Function to load Google Gemini Pro Vision API And get response
def get_gemini_response(input, image, prompt):
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    response = model.generate_content([input, image[0], prompt])
    return response.text

def input_image_setup(uploaded_file):
    # Check if a file has been uploaded
    if uploaded_file is not None:
        # Read the file into bytes
        bytes_data = uploaded_file.getvalue()

        image_parts = [
            {
                "mime_type": uploaded_file.type,  # Get the mime type of the uploaded file
                "data": bytes_data
            }
        ]
        return image_parts
    else:
        raise FileNotFoundError("No file uploaded")

## If submit button is clicked
if submit:
    image_data = input_image_setup(uploaded_file)
    response = get_gemini_response(input_prompt, image_data, input_text)
    st.subheader("The Response is")
    st.write(response)

    ## Convert the response to speech
    engine = pyttsx3.init()
    engine.say(response)
    engine.runAndWait()

    ## Play audio in Streamlit
    st.audio(response, format='audio/wav')
